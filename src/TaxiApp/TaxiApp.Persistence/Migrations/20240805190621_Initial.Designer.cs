// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaxiApp.Persistence;

#nullable disable

namespace TaxiApp.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240805190621_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaxiApp.Domain.Entities.Drive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<int>("DriveTime")
                        .HasColumnType("integer");

                    b.Property<int>("DriverArrivingTime")
                        .HasColumnType("integer");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("ToAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("UserId");

                    b.ToTable("Drive");
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fb866b7-4097-4cae-9621-374243dfaa2f"),
                            Name = "RoleAdmin"
                        },
                        new
                        {
                            Id = new Guid("c01380e9-99c3-42e7-9765-17d57a4c3775"),
                            Name = "CanViewAllUsers"
                        },
                        new
                        {
                            Id = new Guid("c07e3032-baab-4b17-b6d5-3533ddc967e7"),
                            Name = "CanViewAllDrives"
                        },
                        new
                        {
                            Id = new Guid("64d7e4fa-5405-4ff8-aace-8bc9000b4020"),
                            Name = "CanRequestDrive"
                        },
                        new
                        {
                            Id = new Guid("539af748-b396-4a71-bf90-851bf6b8a6d1"),
                            Name = "CanAcceptDrive"
                        },
                        new
                        {
                            Id = new Guid("387b822b-90f2-4207-b5ab-3a880ac2a785"),
                            Name = "CanViewNewDrives"
                        },
                        new
                        {
                            Id = new Guid("161e3029-24be-4f0d-8c50-922f6c5d18ac"),
                            Name = "CanViewHisDrives"
                        },
                        new
                        {
                            Id = new Guid("fb82cbe9-ff63-4751-9d3b-5884187a6fa8"),
                            Name = "CanUpdateProfile"
                        },
                        new
                        {
                            Id = new Guid("e5d3bb9d-7ae6-41c9-9ef4-4497ea4514ac"),
                            Name = "CanViewNewDrives"
                        },
                        new
                        {
                            Id = new Guid("8b86659d-a84c-42e2-bd09-c657517d40bf"),
                            Name = "CanViewDriveDetails"
                        });
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7176096-04c9-4056-975b-aab00fd571e2"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("1812c7bc-372d-4609-b141-6bdc4976e5e0"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("0560ff95-2448-4e64-9e4d-459a3af8cddd"),
                            Name = "Driver"
                        });
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            Id = new Guid("85ba7f05-0ca0-4e22-bff0-8a719bf08ec8"),
                            PermissionId = new Guid("3fb866b7-4097-4cae-9621-374243dfaa2f"),
                            RoleId = new Guid("d7176096-04c9-4056-975b-aab00fd571e2")
                        },
                        new
                        {
                            Id = new Guid("7d0e9685-1a0f-4104-b84c-6c30ac29dc07"),
                            PermissionId = new Guid("c01380e9-99c3-42e7-9765-17d57a4c3775"),
                            RoleId = new Guid("d7176096-04c9-4056-975b-aab00fd571e2")
                        },
                        new
                        {
                            Id = new Guid("fe6f4424-f980-4548-81c4-edebf1ce4747"),
                            PermissionId = new Guid("c07e3032-baab-4b17-b6d5-3533ddc967e7"),
                            RoleId = new Guid("d7176096-04c9-4056-975b-aab00fd571e2")
                        },
                        new
                        {
                            Id = new Guid("99066e74-51a7-447a-aa91-fc48c1ebc190"),
                            PermissionId = new Guid("fb82cbe9-ff63-4751-9d3b-5884187a6fa8"),
                            RoleId = new Guid("d7176096-04c9-4056-975b-aab00fd571e2")
                        },
                        new
                        {
                            Id = new Guid("83f6b197-95c4-414b-b7a8-d3db04316b99"),
                            PermissionId = new Guid("387b822b-90f2-4207-b5ab-3a880ac2a785"),
                            RoleId = new Guid("d7176096-04c9-4056-975b-aab00fd571e2")
                        },
                        new
                        {
                            Id = new Guid("337d11a0-7d3c-4cad-a750-300456bff9c0"),
                            PermissionId = new Guid("8b86659d-a84c-42e2-bd09-c657517d40bf"),
                            RoleId = new Guid("d7176096-04c9-4056-975b-aab00fd571e2")
                        },
                        new
                        {
                            Id = new Guid("7fe3a356-1a7e-4243-9d7e-8ee861d40858"),
                            PermissionId = new Guid("fb82cbe9-ff63-4751-9d3b-5884187a6fa8"),
                            RoleId = new Guid("1812c7bc-372d-4609-b141-6bdc4976e5e0")
                        },
                        new
                        {
                            Id = new Guid("0b738161-2ddd-4d66-a8b8-c8e45d1f3f82"),
                            PermissionId = new Guid("64d7e4fa-5405-4ff8-aace-8bc9000b4020"),
                            RoleId = new Guid("1812c7bc-372d-4609-b141-6bdc4976e5e0")
                        },
                        new
                        {
                            Id = new Guid("1ed5e0ca-0b8c-4458-8d86-57724038f365"),
                            PermissionId = new Guid("161e3029-24be-4f0d-8c50-922f6c5d18ac"),
                            RoleId = new Guid("1812c7bc-372d-4609-b141-6bdc4976e5e0")
                        },
                        new
                        {
                            Id = new Guid("94d7e0b9-3e05-47d1-beea-ce3b4ce6ad74"),
                            PermissionId = new Guid("8b86659d-a84c-42e2-bd09-c657517d40bf"),
                            RoleId = new Guid("1812c7bc-372d-4609-b141-6bdc4976e5e0")
                        },
                        new
                        {
                            Id = new Guid("4d0ea509-f5a8-4db3-9224-dc207dc5127a"),
                            PermissionId = new Guid("fb82cbe9-ff63-4751-9d3b-5884187a6fa8"),
                            RoleId = new Guid("0560ff95-2448-4e64-9e4d-459a3af8cddd")
                        },
                        new
                        {
                            Id = new Guid("5012eac8-84ea-45d0-b38d-a46ffd4163d3"),
                            PermissionId = new Guid("539af748-b396-4a71-bf90-851bf6b8a6d1"),
                            RoleId = new Guid("0560ff95-2448-4e64-9e4d-459a3af8cddd")
                        },
                        new
                        {
                            Id = new Guid("791bdfaf-ce04-46ca-9aee-786253b5e397"),
                            PermissionId = new Guid("161e3029-24be-4f0d-8c50-922f6c5d18ac"),
                            RoleId = new Guid("0560ff95-2448-4e64-9e4d-459a3af8cddd")
                        },
                        new
                        {
                            Id = new Guid("c62241dc-6ccd-41bc-bb7d-b7b15e5a5162"),
                            PermissionId = new Guid("387b822b-90f2-4207-b5ab-3a880ac2a785"),
                            RoleId = new Guid("0560ff95-2448-4e64-9e4d-459a3af8cddd")
                        },
                        new
                        {
                            Id = new Guid("570c6300-adb6-4599-a965-acce068fa8be"),
                            PermissionId = new Guid("8b86659d-a84c-42e2-bd09-c657517d40bf"),
                            RoleId = new Guid("0560ff95-2448-4e64-9e4d-459a3af8cddd")
                        });
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fff9ce2e-f83b-4ae9-a490-ecf1bea6adcd"),
                            Address = "address",
                            DateOfBirth = new DateTime(1997, 1, 18, 23, 40, 0, 0, DateTimeKind.Utc),
                            Email = "admintaxiapp@yopmail.com",
                            IsEmailVerified = true,
                            Name = "admin",
                            Password = "w18sTtz2B0L0xtlle9xi3A==;7C7r8AaAq4VGSTzu1yE0b/WJh4PcVwlgnPxKZk6y5Ko=",
                            Surname = "admin",
                            UserStatus = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8aed2356-9af6-4338-9d7f-c9afbc820135"),
                            RoleId = new Guid("d7176096-04c9-4056-975b-aab00fd571e2"),
                            UserId = new Guid("fff9ce2e-f83b-4ae9-a490-ecf1bea6adcd")
                        });
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.VerificationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("VerificationTokens", (string)null);
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.Drive", b =>
                {
                    b.HasOne("TaxiApp.Domain.Entities.User", "Driver")
                        .WithMany("DrivesDriver")
                        .HasForeignKey("DriverId");

                    b.HasOne("TaxiApp.Domain.Entities.User", "User")
                        .WithMany("DrivesPassanger")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("TaxiApp.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("TaxiApp.Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiApp.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("TaxiApp.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.VerificationToken", b =>
                {
                    b.HasOne("TaxiApp.Domain.Entities.User", "User")
                        .WithMany("VerificationTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.User", b =>
                {
                    b.Navigation("DrivesDriver");

                    b.Navigation("DrivesPassanger");

                    b.Navigation("RefreshTokens");

                    b.Navigation("VerificationTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
