// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaxiApp.Persistence;

#nullable disable

namespace TaxiApp.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240608123327_VerificationTokens")]
    partial class VerificationTokens
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaxiApp.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("58238749-8a6f-4a6f-b668-f530d85d78e9"),
                            Name = "CanViewAllUsers"
                        },
                        new
                        {
                            Id = new Guid("97ed1ace-4e75-4aa0-a265-2ad03bb7eead"),
                            Name = "RoleAdmin"
                        },
                        new
                        {
                            Id = new Guid("38310945-9ff8-441a-83e0-ddd43d9ae876"),
                            Name = "TestPermission"
                        });
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("98dcd037-c73d-4046-95dc-a423c02cf2de"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("29647412-68af-417a-bddd-c102c6fbf476"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("7fba78ba-e33b-418d-9503-b93f887b315a"),
                            Name = "Driver"
                        });
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            Id = new Guid("79853258-488a-41ec-8a00-74722b8f50a9"),
                            PermissionId = new Guid("97ed1ace-4e75-4aa0-a265-2ad03bb7eead"),
                            RoleId = new Guid("98dcd037-c73d-4046-95dc-a423c02cf2de")
                        },
                        new
                        {
                            Id = new Guid("32090c89-ffac-4551-96c8-aea8fd7b1ffb"),
                            PermissionId = new Guid("38310945-9ff8-441a-83e0-ddd43d9ae876"),
                            RoleId = new Guid("98dcd037-c73d-4046-95dc-a423c02cf2de")
                        },
                        new
                        {
                            Id = new Guid("a851c7d6-ea7f-4e78-8fac-80bf0d8f68ed"),
                            PermissionId = new Guid("58238749-8a6f-4a6f-b668-f530d85d78e9"),
                            RoleId = new Guid("98dcd037-c73d-4046-95dc-a423c02cf2de")
                        },
                        new
                        {
                            Id = new Guid("9e572743-706b-459b-80bb-ef139716d8ac"),
                            PermissionId = new Guid("38310945-9ff8-441a-83e0-ddd43d9ae876"),
                            RoleId = new Guid("29647412-68af-417a-bddd-c102c6fbf476")
                        },
                        new
                        {
                            Id = new Guid("5cbe0d81-9dcb-42db-a46d-857d8d655346"),
                            PermissionId = new Guid("38310945-9ff8-441a-83e0-ddd43d9ae876"),
                            RoleId = new Guid("7fba78ba-e33b-418d-9503-b93f887b315a")
                        });
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAdminApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6899967-8c86-4fae-8404-5c07420a8d88"),
                            Address = "address",
                            DateOfBirth = new DateTime(1997, 1, 18, 23, 40, 0, 0, DateTimeKind.Utc),
                            Email = "admin@admin.com",
                            IsAdminApproved = true,
                            IsEmailVerified = true,
                            Name = "admin",
                            Password = "w18sTtz2B0L0xtlle9xi3A==;7C7r8AaAq4VGSTzu1yE0b/WJh4PcVwlgnPxKZk6y5Ko=",
                            Surname = "admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11f9327b-edd1-46db-85ae-f2886b4c9149"),
                            RoleId = new Guid("98dcd037-c73d-4046-95dc-a423c02cf2de"),
                            UserId = new Guid("c6899967-8c86-4fae-8404-5c07420a8d88")
                        });
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.VerificationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("VerificationTokens", (string)null);
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("TaxiApp.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("TaxiApp.Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiApp.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("TaxiApp.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.VerificationToken", b =>
                {
                    b.HasOne("TaxiApp.Domain.Entities.User", null)
                        .WithMany("VerificationTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("VerificationTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
