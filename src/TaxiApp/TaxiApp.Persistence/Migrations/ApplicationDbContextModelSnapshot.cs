// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaxiApp.Persistence;

#nullable disable

namespace TaxiApp.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaxiApp.Domain.Entities.Drive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<int>("DriveTime")
                        .HasColumnType("integer");

                    b.Property<int>("DriverArrivingTime")
                        .HasColumnType("integer");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("ToAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("UserId");

                    b.ToTable("Drive");
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fcd2d4e-8af1-4e8a-8910-795547d0263b"),
                            Name = "RoleAdmin"
                        },
                        new
                        {
                            Id = new Guid("cf33c969-6d1e-4a77-b08c-46e32c2965d4"),
                            Name = "CanViewAllUsers"
                        },
                        new
                        {
                            Id = new Guid("91d8185c-7aa6-4a0e-8a27-e6478f008a90"),
                            Name = "CanViewAllDrives"
                        },
                        new
                        {
                            Id = new Guid("f0e44101-54ce-4760-b896-f6223a3ebaad"),
                            Name = "CanRequestDrive"
                        },
                        new
                        {
                            Id = new Guid("048ec5e1-833f-4a54-b292-6acd5c17f55b"),
                            Name = "CanAcceptDrive"
                        },
                        new
                        {
                            Id = new Guid("91e121c6-08ed-4f75-a027-1fbc8e19abf5"),
                            Name = "CanViewHisDrives"
                        },
                        new
                        {
                            Id = new Guid("17144e93-40cd-440b-b04e-ddc7344ef613"),
                            Name = "CanUpdateProfile"
                        });
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5664914f-9c21-4d11-8db7-5d983adaff51"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("7faabc8b-aec1-41eb-a1b8-3ff59c10b860"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("77d5ebd4-d601-4e92-8a81-556db2fd08de"),
                            Name = "Driver"
                        });
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08da2c58-f446-4ca3-954f-bafc72cab6cc"),
                            PermissionId = new Guid("3fcd2d4e-8af1-4e8a-8910-795547d0263b"),
                            RoleId = new Guid("5664914f-9c21-4d11-8db7-5d983adaff51")
                        },
                        new
                        {
                            Id = new Guid("8a84de46-8424-4cd5-83d8-0bcb46b9cd1d"),
                            PermissionId = new Guid("cf33c969-6d1e-4a77-b08c-46e32c2965d4"),
                            RoleId = new Guid("5664914f-9c21-4d11-8db7-5d983adaff51")
                        },
                        new
                        {
                            Id = new Guid("10e1253c-9673-4c56-bd49-0fdcba7065a2"),
                            PermissionId = new Guid("91d8185c-7aa6-4a0e-8a27-e6478f008a90"),
                            RoleId = new Guid("5664914f-9c21-4d11-8db7-5d983adaff51")
                        },
                        new
                        {
                            Id = new Guid("19747345-d16c-4592-95fc-8861da4208af"),
                            PermissionId = new Guid("17144e93-40cd-440b-b04e-ddc7344ef613"),
                            RoleId = new Guid("5664914f-9c21-4d11-8db7-5d983adaff51")
                        },
                        new
                        {
                            Id = new Guid("c9eb2f72-6fb3-4368-ab72-2986d2720c9b"),
                            PermissionId = new Guid("17144e93-40cd-440b-b04e-ddc7344ef613"),
                            RoleId = new Guid("7faabc8b-aec1-41eb-a1b8-3ff59c10b860")
                        },
                        new
                        {
                            Id = new Guid("4b78909d-3e66-4514-b2c7-994a02e6bc6d"),
                            PermissionId = new Guid("f0e44101-54ce-4760-b896-f6223a3ebaad"),
                            RoleId = new Guid("7faabc8b-aec1-41eb-a1b8-3ff59c10b860")
                        },
                        new
                        {
                            Id = new Guid("9c6b2321-f01e-49d9-9b73-0e86ae63df2a"),
                            PermissionId = new Guid("91e121c6-08ed-4f75-a027-1fbc8e19abf5"),
                            RoleId = new Guid("7faabc8b-aec1-41eb-a1b8-3ff59c10b860")
                        },
                        new
                        {
                            Id = new Guid("45c8069c-c2b1-4644-9fde-6dfc03e31586"),
                            PermissionId = new Guid("17144e93-40cd-440b-b04e-ddc7344ef613"),
                            RoleId = new Guid("77d5ebd4-d601-4e92-8a81-556db2fd08de")
                        },
                        new
                        {
                            Id = new Guid("8ec76ecf-0a74-4be6-bfaf-7368c232ff9c"),
                            PermissionId = new Guid("048ec5e1-833f-4a54-b292-6acd5c17f55b"),
                            RoleId = new Guid("77d5ebd4-d601-4e92-8a81-556db2fd08de")
                        },
                        new
                        {
                            Id = new Guid("ae1b6877-476d-4471-9091-d6fd693e6364"),
                            PermissionId = new Guid("91e121c6-08ed-4f75-a027-1fbc8e19abf5"),
                            RoleId = new Guid("77d5ebd4-d601-4e92-8a81-556db2fd08de")
                        });
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c15615c-a57e-4a1a-9a6e-dc45e88d9c42"),
                            Address = "address",
                            DateOfBirth = new DateTime(1997, 1, 18, 23, 40, 0, 0, DateTimeKind.Utc),
                            Email = "admintaxiapp@yopmail.com",
                            IsEmailVerified = true,
                            Name = "admin",
                            Password = "w18sTtz2B0L0xtlle9xi3A==;7C7r8AaAq4VGSTzu1yE0b/WJh4PcVwlgnPxKZk6y5Ko=",
                            Surname = "admin",
                            UserStatus = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a211cb4-6c40-4a3f-b3dd-a2a229e6379a"),
                            RoleId = new Guid("5664914f-9c21-4d11-8db7-5d983adaff51"),
                            UserId = new Guid("2c15615c-a57e-4a1a-9a6e-dc45e88d9c42")
                        });
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.VerificationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("VerificationTokens", (string)null);
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.Drive", b =>
                {
                    b.HasOne("TaxiApp.Domain.Entities.User", "Driver")
                        .WithMany("DrivesDriver")
                        .HasForeignKey("DriverId");

                    b.HasOne("TaxiApp.Domain.Entities.User", "User")
                        .WithMany("DrivesPassanger")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("TaxiApp.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("TaxiApp.Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiApp.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("TaxiApp.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.VerificationToken", b =>
                {
                    b.HasOne("TaxiApp.Domain.Entities.User", "User")
                        .WithMany("VerificationTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.User", b =>
                {
                    b.Navigation("DrivesDriver");

                    b.Navigation("DrivesPassanger");

                    b.Navigation("RefreshTokens");

                    b.Navigation("VerificationTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
