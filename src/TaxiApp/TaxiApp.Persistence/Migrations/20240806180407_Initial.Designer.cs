// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaxiApp.Persistence;

#nullable disable

namespace TaxiApp.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240806180407_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaxiApp.Domain.Entities.Drive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<int>("DriveTime")
                        .HasColumnType("integer");

                    b.Property<int>("DriverArrivingTime")
                        .HasColumnType("integer");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<int?>("DriverRating")
                        .HasColumnType("integer");

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("ToAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("UserId");

                    b.ToTable("Drive");
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5004688-545c-4ab1-b9f3-99ea961ba1e7"),
                            Name = "RoleAdmin"
                        },
                        new
                        {
                            Id = new Guid("c2726432-32f0-4f52-86c1-54352a103ef1"),
                            Name = "CanViewAllUsers"
                        },
                        new
                        {
                            Id = new Guid("f2a67262-c8c9-4e67-ad86-051cfc12a2b0"),
                            Name = "CanViewAllDrives"
                        },
                        new
                        {
                            Id = new Guid("4bc3b1d0-8788-40a1-9a47-79d596968840"),
                            Name = "CanRequestDrive"
                        },
                        new
                        {
                            Id = new Guid("12bbfa2b-6118-4f71-a479-a1702fc93b4c"),
                            Name = "CanAcceptDrive"
                        },
                        new
                        {
                            Id = new Guid("8ee96c9a-bfea-4aa7-8ec3-d1e884290ff1"),
                            Name = "CanViewNewDrives"
                        },
                        new
                        {
                            Id = new Guid("9326d669-6135-4c4a-92fe-cde94f2adc1d"),
                            Name = "CanViewHisDrives"
                        },
                        new
                        {
                            Id = new Guid("816e0256-4e12-46b8-b7d9-f67693af7783"),
                            Name = "CanUpdateProfile"
                        },
                        new
                        {
                            Id = new Guid("beffbc9e-e38d-4041-8ea4-0fac9c722bd9"),
                            Name = "CanViewNewDrives"
                        },
                        new
                        {
                            Id = new Guid("3a61c85c-d618-471e-8bc5-da659fc9f742"),
                            Name = "CanViewDriveDetails"
                        });
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b057c54-316a-4d59-98e8-436e587c9bd8"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("8aee69d1-961a-48de-8c57-fd6986462d9a"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("683903ee-0186-46bd-9cca-ec872d7bd226"),
                            Name = "Driver"
                        });
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e84f7244-5447-4631-92a8-721555298e19"),
                            PermissionId = new Guid("d5004688-545c-4ab1-b9f3-99ea961ba1e7"),
                            RoleId = new Guid("6b057c54-316a-4d59-98e8-436e587c9bd8")
                        },
                        new
                        {
                            Id = new Guid("697a03ec-f175-497f-a3bd-39e5950c3fec"),
                            PermissionId = new Guid("c2726432-32f0-4f52-86c1-54352a103ef1"),
                            RoleId = new Guid("6b057c54-316a-4d59-98e8-436e587c9bd8")
                        },
                        new
                        {
                            Id = new Guid("a77c8e6b-ceaa-4fcb-8167-ee42029585dc"),
                            PermissionId = new Guid("f2a67262-c8c9-4e67-ad86-051cfc12a2b0"),
                            RoleId = new Guid("6b057c54-316a-4d59-98e8-436e587c9bd8")
                        },
                        new
                        {
                            Id = new Guid("5d1ce379-3ce8-4c22-97fb-dc97d0e43513"),
                            PermissionId = new Guid("816e0256-4e12-46b8-b7d9-f67693af7783"),
                            RoleId = new Guid("6b057c54-316a-4d59-98e8-436e587c9bd8")
                        },
                        new
                        {
                            Id = new Guid("402bbebb-84d3-4f78-9741-3a540f475875"),
                            PermissionId = new Guid("8ee96c9a-bfea-4aa7-8ec3-d1e884290ff1"),
                            RoleId = new Guid("6b057c54-316a-4d59-98e8-436e587c9bd8")
                        },
                        new
                        {
                            Id = new Guid("da87f952-820b-4de7-b45a-823976f24e40"),
                            PermissionId = new Guid("3a61c85c-d618-471e-8bc5-da659fc9f742"),
                            RoleId = new Guid("6b057c54-316a-4d59-98e8-436e587c9bd8")
                        },
                        new
                        {
                            Id = new Guid("c448a3e6-f806-46e4-858d-8b903fcaf5b9"),
                            PermissionId = new Guid("816e0256-4e12-46b8-b7d9-f67693af7783"),
                            RoleId = new Guid("8aee69d1-961a-48de-8c57-fd6986462d9a")
                        },
                        new
                        {
                            Id = new Guid("379c256b-a3b3-494e-9843-7b2761c75d60"),
                            PermissionId = new Guid("4bc3b1d0-8788-40a1-9a47-79d596968840"),
                            RoleId = new Guid("8aee69d1-961a-48de-8c57-fd6986462d9a")
                        },
                        new
                        {
                            Id = new Guid("fd9b3e8f-9a55-44d8-b70b-0c4ea2e0d822"),
                            PermissionId = new Guid("9326d669-6135-4c4a-92fe-cde94f2adc1d"),
                            RoleId = new Guid("8aee69d1-961a-48de-8c57-fd6986462d9a")
                        },
                        new
                        {
                            Id = new Guid("0eb118b9-0a78-4795-adb9-134464dce8da"),
                            PermissionId = new Guid("3a61c85c-d618-471e-8bc5-da659fc9f742"),
                            RoleId = new Guid("8aee69d1-961a-48de-8c57-fd6986462d9a")
                        },
                        new
                        {
                            Id = new Guid("24780673-60d2-44aa-97f1-65206545bc3c"),
                            PermissionId = new Guid("816e0256-4e12-46b8-b7d9-f67693af7783"),
                            RoleId = new Guid("683903ee-0186-46bd-9cca-ec872d7bd226")
                        },
                        new
                        {
                            Id = new Guid("3e755cf0-a069-4226-b993-7852e6bcf28a"),
                            PermissionId = new Guid("12bbfa2b-6118-4f71-a479-a1702fc93b4c"),
                            RoleId = new Guid("683903ee-0186-46bd-9cca-ec872d7bd226")
                        },
                        new
                        {
                            Id = new Guid("d9de5905-b513-4382-a341-89b003b02d71"),
                            PermissionId = new Guid("9326d669-6135-4c4a-92fe-cde94f2adc1d"),
                            RoleId = new Guid("683903ee-0186-46bd-9cca-ec872d7bd226")
                        },
                        new
                        {
                            Id = new Guid("3c1003b3-7f37-4476-9fcf-e4a75a03d822"),
                            PermissionId = new Guid("8ee96c9a-bfea-4aa7-8ec3-d1e884290ff1"),
                            RoleId = new Guid("683903ee-0186-46bd-9cca-ec872d7bd226")
                        },
                        new
                        {
                            Id = new Guid("de25bffd-ee8a-4962-9fe7-69723bc27b02"),
                            PermissionId = new Guid("3a61c85c-d618-471e-8bc5-da659fc9f742"),
                            RoleId = new Guid("683903ee-0186-46bd-9cca-ec872d7bd226")
                        });
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a8af3ca-8719-4f48-bbf7-e4e5e5f825fa"),
                            Address = "address",
                            DateOfBirth = new DateTime(1997, 1, 18, 23, 40, 0, 0, DateTimeKind.Utc),
                            Email = "admintaxiapp@yopmail.com",
                            IsEmailVerified = true,
                            Name = "admin",
                            Password = "w18sTtz2B0L0xtlle9xi3A==;7C7r8AaAq4VGSTzu1yE0b/WJh4PcVwlgnPxKZk6y5Ko=",
                            Surname = "admin",
                            UserStatus = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4117d841-ff32-4a1e-9eab-1f7d604089a1"),
                            RoleId = new Guid("6b057c54-316a-4d59-98e8-436e587c9bd8"),
                            UserId = new Guid("5a8af3ca-8719-4f48-bbf7-e4e5e5f825fa")
                        });
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.VerificationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("VerificationTokens", (string)null);
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.Drive", b =>
                {
                    b.HasOne("TaxiApp.Domain.Entities.User", "Driver")
                        .WithMany("DrivesDriver")
                        .HasForeignKey("DriverId");

                    b.HasOne("TaxiApp.Domain.Entities.User", "User")
                        .WithMany("DrivesPassanger")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("TaxiApp.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("TaxiApp.Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiApp.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("TaxiApp.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.VerificationToken", b =>
                {
                    b.HasOne("TaxiApp.Domain.Entities.User", "User")
                        .WithMany("VerificationTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiApp.Domain.Entities.User", b =>
                {
                    b.Navigation("DrivesDriver");

                    b.Navigation("DrivesPassanger");

                    b.Navigation("RefreshTokens");

                    b.Navigation("VerificationTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
